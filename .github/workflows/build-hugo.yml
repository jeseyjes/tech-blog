name: Build Hugo Blog

# Run the workflow when a change is merged into the 'main' branch
on:
  push:
    branches:
      - main

env:
  AWS_REGION: "eu-west-2"  # s3 bucket region

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Install Hugo
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: 'latest'
          extended: true  # Use extended version if your blog uses SCSS

      # Step 3: Build the Hugo site
      - name: Build the site
        run: hugo

      - name: List contents of public folder
        run: ls -l public/

      # Optional: Save the build output (for debugging)
      - name: Upload public folder
        uses: actions/upload-artifact@v4
        with:
          name: tech-blog
          path: public/*

  deploy:
    name: Publish
    needs: build  # This job depends on the successful completion of 'build'
    runs-on: ubuntu-latest  # Specifies the runner for this job
    permissions:
      id-token: write  # Required for OpenID Connect (OIDC) to assume the IAM role
      contents: read   # Grants read access to the repository's contents

    steps:
      # Step 1: Download the artifact from the previous job
      - name: Download public folder
        uses: actions/download-artifact@v4
        with:
          name: tech-blog  # Name of the artifact created in a previous job

      # Step 2: Configure AWS credentials using the IAM role
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN1 }}  # The ARN of your IAM role, stored as a GitHub secret
          aws-region: eu-west-2  # Region corrected to use the actual value directly

      # Step 3: Sync files from the 'public/' folder to the S3 bucket
      - name: S3 sync
        run: | 
          aws s3 sync . s3://${{ secrets.BUCKET_NAME }} \
          --delete  

      # Step 4: Create a CloudFront invalidation to clear cached files
      - name: Create CloudFront Invalidation
        run: |
          aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.DISTRIBUTION_ID }} \
          --paths "/*"  # Invalidate all cached files to ensure updates are served
