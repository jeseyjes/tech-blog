name: Release

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  AWS_REGION: "eu-west-2"

jobs:
  Infra-job:
    name: AWS Infrastructure Provisioning with TerraformOIDC
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Terraform

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.9.7"
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve

      - name: Terraform Output
        id: tf_out
        run: |
          echo "s3=$(terraform output s3_bucket | tr -d '""')" >> "$GITHUB_OUTPUT"
          echo "cfid=$(terraform output cloudFront_ID | tr -d '""')" >> "$GITHUB_OUTPUT"
          echo "domain=$(terraform output cloudFront_domain_name | tr -d '""')" >> "$GITHUB_OUTPUT"

    outputs:
      s3_bucket: ${{ steps.tf_out.outputs.s3 }}
      cf_id: ${{ steps.tf_out.outputs.cfid }}
      domain: ${{ steps.tf_out.outputs.domain }}

  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install Hugo
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: 'latest'
          extended: true  # Use extended version if your blog uses SCSS

      # Build the Hugo site
      - name: Build the site
        run: hugo

      - name: List contents of public folder
        run: ls -l public/

      # Save the build output (for debugging)
      - name: Upload public folder
        uses: actions/upload-artifact@v4
        with:
          name: tech-blog
          path: public/*

  deploy:
    name: Publish
    needs: build  
    runs-on: ubuntu-latest  #Specifies the runner for this job
    permissions:
      id-token: write  # Required for OpenID Connect (OIDC) to assume the IAM role
      contents: read   # Grants read access to the repository's contents

    steps:
      # Step 1: Download the artifact from the previous job
      - name: Download public folder
        uses: actions/download-artifact@v4
        with:
          name: tech-blog  # Name of the artifact created in a previous job

      # Step 2: Configure AWS credentials using the IAM role
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}  
          aws-region: eu-west-2  

      # Step 3: Sync files from the 'public/' folder to the S3 bucket
      - name: S3 sync
        run: | 
          aws s3 sync . s3://${{ secrets.BUCKET_NAME }} \
          --delete  

      # Step 4: Create a CloudFront invalidation to clear cached files
      - name: Create CloudFront Invalidation
        run: |
          aws cloudfront create-invalidation \
          --distribution-id ${{secrets.DISTRIBUTION_ID}} \
          --paths "/*"  
